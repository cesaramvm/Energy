LINECHART APPLICATION

public class LineChartSample extends Application {

    private static ArrayList<Double> data;
    private static String mseChartTitle;

    @Override
    public void start(Stage stage) {
        stage.setTitle("Line Chart");
        //defining the axes
        NumberAxis xAxis = new NumberAxis();
        NumberAxis yAxis = new NumberAxis();
        xAxis.setLabel("Epochs");
        yAxis.setLabel("MSE");
        //creating the chart
        LineChart<Number, Number> lineChart = new LineChart<>(xAxis, yAxis);

        lineChart.setTitle("MSE Chart for " + mseChartTitle);
        //defining a series
        XYChart.Series series = new XYChart.Series();
        series.setName("My portfolio");
        //populating the series with data
        for (int i = 0; i < data.size(); i++) {
            Double d = data.get(i);
            series.getData().add(new XYChart.Data(i, d));
        }

        Scene scene = new Scene(lineChart, 1000, 600);
        lineChart.getData().add(series);

        stage.setScene(scene);
        stage.show();
    }

    public void execute(ArrayList<Double> incomingData, String chartTitle) {
        data = incomingData;
        mseChartTitle = chartTitle;
        launch();
    }
}



ENTRENAMIENTO OR

//        NeuralNetwork neuralNetwork = new Perceptron(2, 1);
        NeuralNetwork neuralNetwork = 
        new MultiLayerPerceptron(TransferFunctionType.STEP, 2, 2, 3, 3, 1);
        // create training set
        DataSet trainingSet = new DataSet(2, 1);
        // add training data to training set (logical OR function)
        trainingSet.addRow(new DataSetRow(new double[]{0, 0}, new double[]{0}));
        trainingSet.addRow(new DataSetRow(new double[]{0, 1}, new double[]{1}));
        trainingSet.addRow(new DataSetRow(new double[]{1, 0}, new double[]{1}));
        trainingSet.addRow(new DataSetRow(new double[]{1, 1}, new double[]{1}));
        // learn the training set
        Long before = System.currentTimeMillis();
        neuralNetwork.learn(trainingSet);
        Long after = System.currentTimeMillis();
        Long time = after-before;
        System.err.println("Training= " + time + " milisegundos, " + time/1000 + " segundos.");
        // save the trained network into file
        neuralNetwork.save("or_perceptron.nnet");
        
        try {
            InputStream inputStream = new FileInputStream("or_perceptron.nnet");
            NeuralNetwork neuralNetwork2 = NeuralNetwork.load(inputStream);

            // set network input
            neuralNetwork2.setInput(1, 0);
            // calculate network
            neuralNetwork2.calculate();
            // get network output
            double[] networkOutput = neuralNetwork2.getOutput();

            for (Double d : networkOutput) {
                System.out.println(d);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }