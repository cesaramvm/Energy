
//        NeuralNetwork neuralNetwork = new Perceptron(2, 1);
        NeuralNetwork neuralNetwork = 
        new MultiLayerPerceptron(TransferFunctionType.STEP, 2, 2, 3, 3, 1);
        // create training set
        DataSet trainingSet = new DataSet(2, 1);
        // add training data to training set (logical OR function)
        trainingSet.addRow(new DataSetRow(new double[]{0, 0}, new double[]{0}));
        trainingSet.addRow(new DataSetRow(new double[]{0, 1}, new double[]{1}));
        trainingSet.addRow(new DataSetRow(new double[]{1, 0}, new double[]{1}));
        trainingSet.addRow(new DataSetRow(new double[]{1, 1}, new double[]{1}));
        // learn the training set
        Long before = System.currentTimeMillis();
        neuralNetwork.learn(trainingSet);
        Long after = System.currentTimeMillis();
        Long time = after-before;
        System.err.println("Training= " + time + " milisegundos, " + time/1000 + " segundos.");
        // save the trained network into file
        neuralNetwork.save("or_perceptron.nnet");
        
        try {
            InputStream inputStream = new FileInputStream("or_perceptron.nnet");
            NeuralNetwork neuralNetwork2 = NeuralNetwork.load(inputStream);

            // set network input
            neuralNetwork2.setInput(1, 0);
            // calculate network
            neuralNetwork2.calculate();
            // get network output
            double[] networkOutput = neuralNetwork2.getOutput();

            for (Double d : networkOutput) {
                System.out.println(d);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }